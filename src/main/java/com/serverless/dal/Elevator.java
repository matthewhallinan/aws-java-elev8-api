package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.log4j.Logger;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

@DynamoDBTable(tableName = "PLACEHOLDER_PRODUCTS_TABLE_NAME")
public class Elevator {

    // get the table name from env. var. set in serverless.yml
    private static final String ELEVATOR_TABLE_NAME = System.getenv("ELEVATOR_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private Logger logger = Logger.getLogger(this.getClass());

    private String pk;
    private String sk;
    private String elevatorName;
    private ArrayList<Integer> floors;
    private int currentFloor;
    private String currentState;

    @DynamoDBHashKey(attributeName = "pk")
//    @DynamoDBAutoGeneratedKey
    public String getPk() {
        return this.pk;
    }
    public void setPk(String sk) { this.pk = pk; }

    @DynamoDBRangeKey(attributeName = "sk")
    public String getSk() {
        return this.sk;
    }
    public void setSk(String sk) {
        this.sk = sk;
    }

    @DynamoDBAttribute(attributeName = "elevatorName")
    public String getElevatorName() {
        return this.elevatorName;
    }
    public void setElevatorName(String elevatorName) { this.elevatorName = elevatorName; }

    @DynamoDBAttribute(attributeName = "floors")
    public ArrayList<Integer> getFloors() {
        return this.floors;
    }
    public void setFloors(ArrayList<Integer> floors) { this.floors = floors; }

    @DynamoDBAttribute(attributeName = "currentFloor")
    public int getCurrentFloor() {
        return this.currentFloor;
    }
    public void setCurrentFloor(int currentFloor) { this.currentFloor = currentFloor; }

    @DynamoDBAttribute(attributeName = "currentState")
    public String getCurrentState() {
        return this.currentState;
    }
    public void setCurrentState(String currentStatee) { this.currentState = currentState; }

    public Elevator() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(ELEVATOR_TABLE_NAME))
            .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("User [sk=%s, elevatorName=%s, floors=%s, currentFloor=%s, currentState=%s]", this.sk, this.elevatorName, this.floors,this.currentFloor, this.currentState);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(ELEVATOR_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public Elevator get(String id) throws IOException {
        Elevator elevator = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Elevator> queryExp = new DynamoDBQueryExpression<Elevator>()
            .withKeyConditionExpression("sk = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<Elevator> result = this.mapper.query(Elevator.class, queryExp);
        if (result.size() > 0) {
          elevator = result.get(0);
          logger.info("Elevator - get(): elevator - " + elevator.toString());
        } else {
          logger.info("Elevator - get(): elevator - Not Found.");
        }
        return elevator;
    }

    public void save(Elevator elevator) throws IOException {
        logger.info("Elevator - save(): " + elevator.toString());
        this.mapper.save(elevator);
    }

}
